#ifndef __cocos2dx_h__
#define __cocos2dx_h__

#include "RubyBridge.h"

void rb_register_cocos2dx_Ref();
RBVAL rb_cocos2dx_Ref_release(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Ref_retain(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Ref_getReferenceCount(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Console();
RBVAL rb_cocos2dx_Console_stop(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Console_listenOnTCP(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Console_listenOnFileDescriptor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Console_log(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Texture2D();
RBVAL rb_cocos2dx_Texture2D_getMaxT(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getStringForFormat(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_initWithImage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getMaxS(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_releaseGLTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_hasPremultipliedAlpha(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getPixelsHigh(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getBitsPerPixelForFormat(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_initWithString(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_setMaxT(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_drawInRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getContentSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_setAliasTexParameters(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_setAntiAliasTexParameters(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_generateMipmap(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getDescription(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getPixelFormat(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_setGLProgram(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getContentSizeInPixels(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getPixelsWide(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_drawAtPoint(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getGLProgram(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_hasMipmaps(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_setMaxS(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_setDefaultAlphaPixelFormat(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_getDefaultAlphaPixelFormat(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Texture2D_Texture2D(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Touch();
RBVAL rb_cocos2dx_Touch_getPreviousLocationInView(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Touch_getLocation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Touch_getDelta(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Touch_getStartLocationInView(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Touch_getStartLocation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Touch_getID(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Touch_setTouchInfo(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Touch_getLocationInView(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Touch_getPreviousLocation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Touch_Touch(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Event();
RBVAL rb_cocos2dx_Event_isStopped(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Event_getType(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Event_getCurrentTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Event_stopPropagation(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventTouch();
RBVAL rb_cocos2dx_EventTouch_getEventCode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventTouch_setEventCode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventTouch_EventTouch(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventKeyboard();
RBVAL rb_cocos2dx_EventKeyboard_EventKeyboard(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Node();
RBVAL rb_cocos2dx_Node_addChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_removeComponent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setPhysicsBody(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getDescription(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setRotationSkewY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setOpacityModifyRGB(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setCascadeOpacityEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getChildren(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setOnExitCallback(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_pause(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_convertToWorldSpaceAR(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_isIgnoreAnchorPointForPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getChildByName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_updateDisplayedOpacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getCameraMask(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setRotation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setScaleZ(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setScaleY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setScaleX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setRotationSkewX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setonEnterTransitionDidFinishCallback(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_removeFromPhysicsWorld(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_removeAllComponents(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getOpacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setCameraMask(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getGLProgram(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getNodeToWorldTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getPosition3D(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_removeChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_convertToWorldSpace(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getScene(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getEventDispatcher(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setSkewX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setGLProgramState(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setOnEnterCallback(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setNormalizedPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setonExitTransitionDidStartCallback(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_convertTouchToNodeSpace(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_removeAllChildrenWithCleanup(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getNodeToParentAffineTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_isCascadeOpacityEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setParent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_resume(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getRotation3D(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getNodeToParentTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_convertTouchToNodeSpaceAR(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_convertToNodeSpace(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getPhysicsBody(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_stopActionByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_reorderChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_ignoreAnchorPointForPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setSkewY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setPositionZ(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setRotation3D(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setPositionX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setNodeToParentTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getAnchorPoint(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getNumberOfRunningActions(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_updateTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_isVisible(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getChildrenCount(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setAnchorPoint(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_convertToNodeSpaceAR(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_addComponent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_runAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_isOpacityModifyRGB(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getRotation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getAnchorPointInPoints(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_visit(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_removeChildByName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getGLProgramState(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setScheduler(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_stopAllActions(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getSkewX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getSkewY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getDisplayedColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getActionByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getDisplayedOpacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getLocalZOrder(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getScheduler(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getParentToNodeAffineTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getOrderOfArrival(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setContentSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setActionManager(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_isRunning(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getParent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getPositionZ(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getPositionY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getPositionX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_removeChildByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setPositionY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getNodeToWorldAffineTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_updateDisplayedColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setVisible(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getParentToNodeTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_isScheduled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setGlobalZOrder(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setScale(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getChildByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setOrderOfArrival(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getScaleZ(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getScaleY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getScaleX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setLocalZOrder(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getWorldToNodeAffineTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setCascadeColorEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setOpacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_cleanup(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getComponent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getContentSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_stopAllActionsByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getBoundingBox(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setEventDispatcher(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getGlobalZOrder(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_draw(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setUserObject(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_removeFromParentAndCleanup(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setPosition3D(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_update(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_sortAllChildren(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getWorldToNodeTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setGLProgram(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getScale(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getNormalizedPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getRotationSkewX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getRotationSkewY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_setTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_isCascadeColorEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_stopAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_getActionManager(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Node_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Scene();
RBVAL rb_cocos2dx_Scene_render(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Scene_createWithSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Scene_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Scene_createWithPhysics(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_GLView();
RBVAL rb_cocos2dx_GLView_setFrameSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getViewPortRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_setContentScaleFactor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getContentScaleFactor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_setIMEKeyboardState(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_setScissorInPoints(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getViewName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_isOpenGLReady(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_end(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getScaleY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getScaleX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getVisibleOrigin(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getFrameSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_setFrameZoomFactor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getFrameZoomFactor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getDesignResolutionSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_windowShouldClose(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_swapBuffers(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_setDesignResolutionSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getResolutionPolicy(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_isRetinaDisplay(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_setViewPortInPoints(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getScissorRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getRetinaFactor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_setViewName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getVisibleRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getVisibleSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_isScissorEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_pollEvents(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_setGLContextAttrs(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLView_getGLContextAttrs(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Director();
RBVAL rb_cocos2dx_Director_pause(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setEventDispatcher(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setContentScaleFactor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getContentScaleFactor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getWinSizeInPixels(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getDeltaTime(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setGLDefaultValues(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setActionManager(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setAlphaBlending(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_popToRootScene(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_loadMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getNotificationNode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getWinSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getTextureCache(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_isSendCleanupToScene(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getVisibleOrigin(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_mainLoop(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setDepthTest(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getFrameRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getSecondsPerFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_resetMatrixStack(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_convertToUI(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_pushMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setDefaultValues(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_init(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setScheduler(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_startAnimation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getOpenGLView(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getRunningScene(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setViewport(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_stopAnimation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_popToSceneStackLevel(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_resume(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_isNextDeltaTimeZero(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setOpenGLView(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_convertToGL(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_purgeCachedData(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getTotalFrames(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_runWithScene(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setNotificationNode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_drawScene(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_popScene(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_loadIdentityMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_isDisplayStats(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setProjection(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getConsole(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_multiplyMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getZEye(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setNextDeltaTimeZero(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_popMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getVisibleSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getScheduler(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_pushScene(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getAnimationInterval(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_isPaused(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setDisplayStats(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getEventDispatcher(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_replaceScene(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_setAnimationInterval(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getActionManager(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Director_getInstance(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Timer();
RBVAL rb_cocos2dx_Timer_getInterval(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Timer_setupTimerWithInterval(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Timer_setInterval(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Timer_update(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Timer_trigger(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Timer_cancel(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Scheduler();
RBVAL rb_cocos2dx_Scheduler_setTimeScale(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Scheduler_getTimeScale(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Scheduler_Scheduler(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FileUtils();
RBVAL rb_cocos2dx_FileUtils_fullPathForFilename(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_getStringFromFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_setFilenameLookupDictionary(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_removeFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_isAbsolutePath(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_renameFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_isPopupNotify(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_writeToFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_getValueMapFromFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_getValueMapFromData(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_removeDirectory(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_getFileSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_addSearchResolutionsOrder(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_addSearchPath(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_isFileExist(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_purgeCachedEntries(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_fullPathFromRelativeFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_setPopupNotify(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_isDirectoryExist(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_createDirectory(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_getWritablePath(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_destroyInstance(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FileUtils_getInstance(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_UserDefault();
RBVAL rb_cocos2dx_UserDefault_setIntegerForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_getFloatForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_getBoolForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_setDoubleForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_setFloatForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_getStringForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_setStringForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_flush(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_getIntegerForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_getDoubleForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_setBoolForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_destroyInstance(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_getXMLFilePath(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_UserDefault_isXMLFileExist(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventListener();
RBVAL rb_cocos2dx_EventListener_setEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventListener_clone(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventListener_isEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventListener_checkAvailable(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventDispatcher();
RBVAL rb_cocos2dx_EventDispatcher_pauseEventListenersForTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_addEventListenerWithSceneGraphPriority(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_setEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_addEventListenerWithFixedPriority(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_removeEventListener(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_resumeEventListenersForTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_removeEventListenersForTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_setPriority(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_addCustomEventListener(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_dispatchEvent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_removeAllEventListeners(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_removeCustomEventListeners(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_isEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_removeEventListenersForType(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventDispatcher_EventDispatcher(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventListenerTouchOneByOne();
RBVAL rb_cocos2dx_EventListenerTouchOneByOne_isSwallowTouches(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventListenerTouchOneByOne_setSwallowTouches(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventListenerTouchOneByOne_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventListenerTouchAllAtOnce();
RBVAL rb_cocos2dx_EventListenerTouchAllAtOnce_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventListenerKeyboard();
RBVAL rb_cocos2dx_EventListenerKeyboard_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventMouse();
RBVAL rb_cocos2dx_EventMouse_getPreviousLocationInView(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getLocation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getMouseButton(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getPreviousLocation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getDelta(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_setScrollData(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getStartLocationInView(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getStartLocation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_setMouseButton(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getLocationInView(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getScrollY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getScrollX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getCursorX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_getCursorY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_setCursorPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventMouse_EventMouse(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventListenerMouse();
RBVAL rb_cocos2dx_EventListenerMouse_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventAcceleration();
void rb_register_cocos2dx_EventListenerAcceleration();
RBVAL rb_cocos2dx_EventListenerAcceleration_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventCustom();
RBVAL rb_cocos2dx_EventCustom_getEventName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EventCustom_EventCustom(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventListenerCustom();
RBVAL rb_cocos2dx_EventListenerCustom_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EventFocus();
void rb_register_cocos2dx_EventListenerFocus();
RBVAL rb_cocos2dx_EventListenerFocus_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Action();
RBVAL rb_cocos2dx_Action_startWithTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_setOriginalTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_clone(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_getOriginalTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_stop(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_update(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_getTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_step(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_setTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_getTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_setTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_isDone(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Action_reverse(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FiniteTimeAction();
RBVAL rb_cocos2dx_FiniteTimeAction_setDuration(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FiniteTimeAction_getDuration(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Speed();
RBVAL rb_cocos2dx_Speed_setInnerAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Speed_setSpeed(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Speed_getInnerAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Speed_getSpeed(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Speed_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Follow();
RBVAL rb_cocos2dx_Follow_setBoundarySet(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Follow_isBoundarySet(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Follow_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_SpriteFrame();
RBVAL rb_cocos2dx_SpriteFrame_clone(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_setRotated(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_setTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_getOffset(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_setRectInPixels(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_getTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_getRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_setOffsetInPixels(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_getRectInPixels(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_setOriginalSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_getOriginalSizeInPixels(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_setOriginalSizeInPixels(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_setOffset(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_isRotated(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_setRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_getOffsetInPixels(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_getOriginalSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrame_createWithTexture(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_AnimationFrame();
RBVAL rb_cocos2dx_AnimationFrame_setSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationFrame_getUserInfo(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationFrame_setDelayUnits(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationFrame_clone(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationFrame_getSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationFrame_getDelayUnits(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationFrame_setUserInfo(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationFrame_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Animation();
RBVAL rb_cocos2dx_Animation_getLoops(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_addSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_setRestoreOriginalFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_clone(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_getDuration(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_setFrames(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_getFrames(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_setLoops(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_setDelayPerUnit(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_addSpriteFrameWithFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_getTotalDelayUnits(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_getDelayPerUnit(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_getRestoreOriginalFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_addSpriteFrameWithTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animation_createWithSpriteFrames(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ActionInterval();
RBVAL rb_cocos2dx_ActionInterval_getAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionInterval_setAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionInterval_getElapsed(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Sequence();
void rb_register_cocos2dx_Repeat();
RBVAL rb_cocos2dx_Repeat_setInnerAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Repeat_getInnerAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Repeat_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_RepeatForever();
RBVAL rb_cocos2dx_RepeatForever_setInnerAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RepeatForever_getInnerAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RepeatForever_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Spawn();
void rb_register_cocos2dx_RotateTo();
RBVAL rb_cocos2dx_RotateTo_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_RotateBy();
RBVAL rb_cocos2dx_RotateBy_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_MoveBy();
RBVAL rb_cocos2dx_MoveBy_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_MoveTo();
RBVAL rb_cocos2dx_MoveTo_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_SkewTo();
RBVAL rb_cocos2dx_SkewTo_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_SkewBy();
RBVAL rb_cocos2dx_SkewBy_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_JumpBy();
RBVAL rb_cocos2dx_JumpBy_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_JumpTo();
RBVAL rb_cocos2dx_JumpTo_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_BezierBy();
void rb_register_cocos2dx_BezierTo();
void rb_register_cocos2dx_ScaleTo();
RBVAL rb_cocos2dx_ScaleTo_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ScaleBy();
RBVAL rb_cocos2dx_ScaleBy_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Blink();
RBVAL rb_cocos2dx_Blink_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FadeTo();
RBVAL rb_cocos2dx_FadeTo_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FadeIn();
RBVAL rb_cocos2dx_FadeIn_setReverseAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FadeIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FadeOut();
RBVAL rb_cocos2dx_FadeOut_setReverseAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FadeOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TintTo();
RBVAL rb_cocos2dx_TintTo_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TintBy();
RBVAL rb_cocos2dx_TintBy_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_DelayTime();
RBVAL rb_cocos2dx_DelayTime_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Animate();
RBVAL rb_cocos2dx_Animate_getAnimation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animate_setAnimation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Animate_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TargetedAction();
RBVAL rb_cocos2dx_TargetedAction_getForcedTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TargetedAction_setForcedTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TargetedAction_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ActionCamera();
RBVAL rb_cocos2dx_ActionCamera_setEye(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionCamera_getEye(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionCamera_setUp(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionCamera_getCenter(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionCamera_setCenter(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionCamera_getUp(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionCamera_ActionCamera(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_OrbitCamera();
RBVAL rb_cocos2dx_OrbitCamera_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ActionManager();
RBVAL rb_cocos2dx_ActionManager_getActionByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_removeActionByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_removeAllActions(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_addAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_resumeTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_update(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_pauseTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_removeAllActionsFromTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_resumeTargets(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_removeAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_removeAllActionsByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_pauseAllRunningActions(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ActionManager_ActionManager(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ActionEase();
RBVAL rb_cocos2dx_ActionEase_getInnerAction(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseRateAction();
RBVAL rb_cocos2dx_EaseRateAction_setRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EaseRateAction_getRate(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseIn();
RBVAL rb_cocos2dx_EaseIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseOut();
RBVAL rb_cocos2dx_EaseOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseInOut();
RBVAL rb_cocos2dx_EaseInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseExponentialIn();
RBVAL rb_cocos2dx_EaseExponentialIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseExponentialOut();
RBVAL rb_cocos2dx_EaseExponentialOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseExponentialInOut();
RBVAL rb_cocos2dx_EaseExponentialInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseSineIn();
RBVAL rb_cocos2dx_EaseSineIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseSineOut();
RBVAL rb_cocos2dx_EaseSineOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseSineInOut();
RBVAL rb_cocos2dx_EaseSineInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseElastic();
RBVAL rb_cocos2dx_EaseElastic_setPeriod(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EaseElastic_getPeriod(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseElasticIn();
RBVAL rb_cocos2dx_EaseElasticIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseElasticOut();
RBVAL rb_cocos2dx_EaseElasticOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseElasticInOut();
RBVAL rb_cocos2dx_EaseElasticInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseBounce();
void rb_register_cocos2dx_EaseBounceIn();
RBVAL rb_cocos2dx_EaseBounceIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseBounceOut();
RBVAL rb_cocos2dx_EaseBounceOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseBounceInOut();
RBVAL rb_cocos2dx_EaseBounceInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseBackIn();
RBVAL rb_cocos2dx_EaseBackIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseBackOut();
RBVAL rb_cocos2dx_EaseBackOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseBackInOut();
RBVAL rb_cocos2dx_EaseBackInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseBezierAction();
RBVAL rb_cocos2dx_EaseBezierAction_setBezierParamer(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_EaseBezierAction_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseQuadraticActionIn();
RBVAL rb_cocos2dx_EaseQuadraticActionIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseQuadraticActionOut();
RBVAL rb_cocos2dx_EaseQuadraticActionOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseQuadraticActionInOut();
RBVAL rb_cocos2dx_EaseQuadraticActionInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseQuarticActionIn();
RBVAL rb_cocos2dx_EaseQuarticActionIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseQuarticActionOut();
RBVAL rb_cocos2dx_EaseQuarticActionOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseQuarticActionInOut();
RBVAL rb_cocos2dx_EaseQuarticActionInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseQuinticActionIn();
RBVAL rb_cocos2dx_EaseQuinticActionIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseQuinticActionOut();
RBVAL rb_cocos2dx_EaseQuinticActionOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseQuinticActionInOut();
RBVAL rb_cocos2dx_EaseQuinticActionInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseCircleActionIn();
RBVAL rb_cocos2dx_EaseCircleActionIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseCircleActionOut();
RBVAL rb_cocos2dx_EaseCircleActionOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseCircleActionInOut();
RBVAL rb_cocos2dx_EaseCircleActionInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseCubicActionIn();
RBVAL rb_cocos2dx_EaseCubicActionIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseCubicActionOut();
RBVAL rb_cocos2dx_EaseCubicActionOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_EaseCubicActionInOut();
RBVAL rb_cocos2dx_EaseCubicActionInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ActionInstant();
void rb_register_cocos2dx_Show();
RBVAL rb_cocos2dx_Show_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Hide();
RBVAL rb_cocos2dx_Hide_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ToggleVisibility();
RBVAL rb_cocos2dx_ToggleVisibility_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_RemoveSelf();
RBVAL rb_cocos2dx_RemoveSelf_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FlipX();
RBVAL rb_cocos2dx_FlipX_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FlipY();
RBVAL rb_cocos2dx_FlipY_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Place();
RBVAL rb_cocos2dx_Place_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_CallFunc();
RBVAL rb_cocos2dx_CallFunc_execute(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_CallFunc_getTargetCallback(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_CallFunc_setTargetCallback(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_GridAction();
RBVAL rb_cocos2dx_GridAction_getGrid(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Grid3DAction();
RBVAL rb_cocos2dx_Grid3DAction_getGrid(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TiledGrid3DAction();
RBVAL rb_cocos2dx_TiledGrid3DAction_getGrid(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_StopGrid();
RBVAL rb_cocos2dx_StopGrid_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ReuseGrid();
RBVAL rb_cocos2dx_ReuseGrid_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Waves3D();
RBVAL rb_cocos2dx_Waves3D_getAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Waves3D_setAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Waves3D_setAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Waves3D_getAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Waves3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FlipX3D();
RBVAL rb_cocos2dx_FlipX3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FlipY3D();
RBVAL rb_cocos2dx_FlipY3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Lens3D();
RBVAL rb_cocos2dx_Lens3D_setPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Lens3D_setConcave(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Lens3D_setLensEffect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Lens3D_getPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Lens3D_getLensEffect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Lens3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Ripple3D();
RBVAL rb_cocos2dx_Ripple3D_setAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Ripple3D_getAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Ripple3D_setAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Ripple3D_getAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Ripple3D_setPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Ripple3D_getPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Ripple3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Shaky3D();
RBVAL rb_cocos2dx_Shaky3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Liquid();
RBVAL rb_cocos2dx_Liquid_getAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Liquid_setAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Liquid_setAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Liquid_getAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Liquid_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Waves();
RBVAL rb_cocos2dx_Waves_getAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Waves_setAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Waves_setAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Waves_getAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Waves_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Twirl();
RBVAL rb_cocos2dx_Twirl_setAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Twirl_getAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Twirl_setAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Twirl_getAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Twirl_setPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Twirl_getPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Twirl_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_PageTurn3D();
RBVAL rb_cocos2dx_PageTurn3D_getGrid(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_PageTurn3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ProgressTo();
RBVAL rb_cocos2dx_ProgressTo_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ProgressFromTo();
RBVAL rb_cocos2dx_ProgressFromTo_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ShakyTiles3D();
RBVAL rb_cocos2dx_ShakyTiles3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ShatteredTiles3D();
RBVAL rb_cocos2dx_ShatteredTiles3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ShuffleTiles();
RBVAL rb_cocos2dx_ShuffleTiles_getDelta(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ShuffleTiles_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FadeOutTRTiles();
RBVAL rb_cocos2dx_FadeOutTRTiles_turnOnTile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FadeOutTRTiles_turnOffTile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FadeOutTRTiles_transformTile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FadeOutTRTiles_testFunc(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FadeOutTRTiles_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FadeOutBLTiles();
RBVAL rb_cocos2dx_FadeOutBLTiles_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FadeOutUpTiles();
RBVAL rb_cocos2dx_FadeOutUpTiles_transformTile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_FadeOutUpTiles_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_FadeOutDownTiles();
RBVAL rb_cocos2dx_FadeOutDownTiles_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TurnOffTiles();
RBVAL rb_cocos2dx_TurnOffTiles_turnOnTile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TurnOffTiles_turnOffTile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TurnOffTiles_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_WavesTiles3D();
RBVAL rb_cocos2dx_WavesTiles3D_getAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_WavesTiles3D_setAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_WavesTiles3D_setAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_WavesTiles3D_getAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_WavesTiles3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_JumpTiles3D();
RBVAL rb_cocos2dx_JumpTiles3D_getAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_JumpTiles3D_setAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_JumpTiles3D_setAmplitudeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_JumpTiles3D_getAmplitude(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_JumpTiles3D_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_SplitRows();
RBVAL rb_cocos2dx_SplitRows_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_SplitCols();
RBVAL rb_cocos2dx_SplitCols_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ActionTween();
RBVAL rb_cocos2dx_ActionTween_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_CardinalSplineTo();
RBVAL rb_cocos2dx_CardinalSplineTo_getPoints(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_CardinalSplineTo_updatePosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_CardinalSplineTo_initWithDuration(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_CardinalSplineTo_CardinalSplineTo(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_CardinalSplineBy();
RBVAL rb_cocos2dx_CardinalSplineBy_CardinalSplineBy(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_CatmullRomTo();
RBVAL rb_cocos2dx_CatmullRomTo_initWithDuration(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_CatmullRomBy();
RBVAL rb_cocos2dx_CatmullRomBy_initWithDuration(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ProtectedNode();
RBVAL rb_cocos2dx_ProtectedNode_addProtectedChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_disableCascadeColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_removeProtectedChildByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_reorderProtectedChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_removeAllProtectedChildrenWithCleanup(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_disableCascadeOpacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_sortAllProtectedChildren(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_getProtectedChildByTag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_removeProtectedChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_removeAllProtectedChildren(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProtectedNode_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_GLProgramState();
RBVAL rb_cocos2dx_GLProgramState_setUniformTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_setUniformMat4(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_applyUniforms(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_applyGLProgram(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_getUniformCount(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_applyAttributes(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_setUniformFloat(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_setUniformVec3(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_setUniformInt(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_getVertexAttribCount(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_setUniformVec4(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_setGLProgram(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_setUniformVec2(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_getVertexAttribsFlags(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_apply(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_getGLProgram(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_getOrCreateWithGLProgramName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramState_getOrCreateWithGLProgram(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_AtlasNode();
RBVAL rb_cocos2dx_AtlasNode_updateAtlasValues(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AtlasNode_getTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AtlasNode_setTextureAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AtlasNode_getTextureAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AtlasNode_getQuadsToDraw(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AtlasNode_setTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AtlasNode_setQuadsToDraw(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AtlasNode_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_DrawNode();
RBVAL rb_cocos2dx_DrawNode_drawLine(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawSolidCircle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_onDrawGLPoint(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawDot(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawSegment(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_onDraw(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawCircle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawQuadBezier(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_onDrawGLLine(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawTriangle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_clear(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawSolidRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawPoint(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_drawCubicBezier(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DrawNode_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_LabelAtlas();
RBVAL rb_cocos2dx_LabelAtlas_setString(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LabelAtlas_initWithString(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LabelAtlas_updateAtlasValues(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LabelAtlas_getString(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LabelAtlas_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_SpriteBatchNode();
RBVAL rb_cocos2dx_SpriteBatchNode_appendChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_addSpriteWithoutQuad(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_reorderBatch(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_removeAllChildrenWithCleanup(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_atlasIndexForChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_setTextureAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_getTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_increaseAtlasCapacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_getTextureAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_insertQuadFromSprite(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_setTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_rebuildIndexInOrder(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_removeChildAtIndex(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteBatchNode_createWithTexture(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Label();
RBVAL rb_cocos2dx_Label_isClipMarginEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_enableShadow(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setDimensions(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getString(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getHeight(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_disableEffect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setTTFConfig(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getTextColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setWidth(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getMaxLineWidth(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getHorizontalAlignment(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setClipMarginEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setString(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setSystemFontName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setBMFontFilePath(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getFontAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setLineHeight(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setSystemFontSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_updateContent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getStringLength(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setLineBreakWithoutSpace(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getStringNumLines(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_enableOutline(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getAdditionalKerning(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setCharMap(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getDimensions(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setMaxLineWidth(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getSystemFontName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setVerticalAlignment(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getLineHeight(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getTTFConfig(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getVerticalAlignment(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setTextColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setHeight(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getWidth(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_enableGlow(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getLetter(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setAdditionalKerning(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getSystemFontSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getTextAlignment(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_getBMFontFilePath(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setHorizontalAlignment(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_setAlignment(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_requestSystemFontRefresh(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_createWithBMFont(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_createWithCharMap(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Label_createWithSystemFont(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Layer();
RBVAL rb_cocos2dx_Layer_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_LayerColor();
RBVAL rb_cocos2dx_LayerColor_changeWidthAndHeight(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerColor_changeHeight(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerColor_changeWidth(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerColor_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_LayerGradient();
RBVAL rb_cocos2dx_LayerGradient_getStartColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_isCompressedInterpolation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_getStartOpacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_setVector(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_setStartOpacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_setCompressedInterpolation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_setEndOpacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_getVector(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_setEndColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_getEndColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_getEndOpacity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_setStartColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerGradient_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_LayerMultiplex();
RBVAL rb_cocos2dx_LayerMultiplex_switchToAndReleaseMe(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerMultiplex_addLayer(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_LayerMultiplex_switchTo(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionEaseScene();
RBVAL rb_cocos2dx_TransitionEaseScene_easeActionWithAction(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionScene();
RBVAL rb_cocos2dx_TransitionScene_finish(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionScene_hideOutShowIn(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionScene_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionSceneOriented();
RBVAL rb_cocos2dx_TransitionSceneOriented_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionRotoZoom();
RBVAL rb_cocos2dx_TransitionRotoZoom_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionJumpZoom();
RBVAL rb_cocos2dx_TransitionJumpZoom_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionMoveInL();
RBVAL rb_cocos2dx_TransitionMoveInL_action(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionMoveInL_easeActionWithAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionMoveInL_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionMoveInR();
RBVAL rb_cocos2dx_TransitionMoveInR_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionMoveInT();
RBVAL rb_cocos2dx_TransitionMoveInT_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionMoveInB();
RBVAL rb_cocos2dx_TransitionMoveInB_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionSlideInL();
RBVAL rb_cocos2dx_TransitionSlideInL_action(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionSlideInL_easeActionWithAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionSlideInL_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionSlideInR();
RBVAL rb_cocos2dx_TransitionSlideInR_action(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionSlideInR_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionSlideInB();
RBVAL rb_cocos2dx_TransitionSlideInB_action(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionSlideInB_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionSlideInT();
RBVAL rb_cocos2dx_TransitionSlideInT_action(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionSlideInT_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionShrinkGrow();
RBVAL rb_cocos2dx_TransitionShrinkGrow_easeActionWithAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionShrinkGrow_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionFlipX();
RBVAL rb_cocos2dx_TransitionFlipX_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionFlipY();
RBVAL rb_cocos2dx_TransitionFlipY_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionFlipAngular();
RBVAL rb_cocos2dx_TransitionFlipAngular_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionZoomFlipX();
RBVAL rb_cocos2dx_TransitionZoomFlipX_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionZoomFlipY();
RBVAL rb_cocos2dx_TransitionZoomFlipY_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionZoomFlipAngular();
RBVAL rb_cocos2dx_TransitionZoomFlipAngular_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionFade();
RBVAL rb_cocos2dx_TransitionFade_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionCrossFade();
RBVAL rb_cocos2dx_TransitionCrossFade_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionTurnOffTiles();
RBVAL rb_cocos2dx_TransitionTurnOffTiles_easeActionWithAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionTurnOffTiles_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionSplitCols();
RBVAL rb_cocos2dx_TransitionSplitCols_action(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionSplitCols_easeActionWithAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionSplitCols_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionSplitRows();
RBVAL rb_cocos2dx_TransitionSplitRows_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionFadeTR();
RBVAL rb_cocos2dx_TransitionFadeTR_easeActionWithAction(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionFadeTR_actionWithSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionFadeTR_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionFadeBL();
RBVAL rb_cocos2dx_TransitionFadeBL_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionFadeUp();
RBVAL rb_cocos2dx_TransitionFadeUp_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionFadeDown();
RBVAL rb_cocos2dx_TransitionFadeDown_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionPageTurn();
RBVAL rb_cocos2dx_TransitionPageTurn_actionWithSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionPageTurn_initWithDuration(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TransitionPageTurn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionProgress();
RBVAL rb_cocos2dx_TransitionProgress_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionProgressRadialCCW();
RBVAL rb_cocos2dx_TransitionProgressRadialCCW_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionProgressRadialCW();
RBVAL rb_cocos2dx_TransitionProgressRadialCW_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionProgressHorizontal();
RBVAL rb_cocos2dx_TransitionProgressHorizontal_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionProgressVertical();
RBVAL rb_cocos2dx_TransitionProgressVertical_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionProgressInOut();
RBVAL rb_cocos2dx_TransitionProgressInOut_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TransitionProgressOutIn();
RBVAL rb_cocos2dx_TransitionProgressOutIn_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_MenuItem();
RBVAL rb_cocos2dx_MenuItem_setEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItem_activate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItem_isEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItem_selected(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItem_isSelected(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItem_unselected(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItem_rect(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_MenuItemLabel();
RBVAL rb_cocos2dx_MenuItemLabel_getDisabledColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemLabel_setString(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemLabel_setLabel(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemLabel_setDisabledColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemLabel_getLabel(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_MenuItemAtlasFont();
void rb_register_cocos2dx_MenuItemFont();
RBVAL rb_cocos2dx_MenuItemFont_getFontSizeObj(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemFont_getFontNameObj(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemFont_setFontSizeObj(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemFont_setFontNameObj(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemFont_setFontName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemFont_getFontSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemFont_getFontName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemFont_setFontSize(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_MenuItemSprite();
RBVAL rb_cocos2dx_MenuItemSprite_setEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemSprite_selected(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemSprite_setNormalImage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemSprite_setDisabledImage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemSprite_setSelectedImage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemSprite_getDisabledImage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemSprite_getSelectedImage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemSprite_getNormalImage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemSprite_unselected(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_MenuItemImage();
RBVAL rb_cocos2dx_MenuItemImage_setDisabledSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemImage_setSelectedSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemImage_setNormalSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_MenuItemToggle();
RBVAL rb_cocos2dx_MenuItemToggle_setSubItems(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemToggle_getSelectedIndex(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemToggle_addSubItem(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemToggle_getSelectedItem(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MenuItemToggle_setSelectedIndex(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Menu();
RBVAL rb_cocos2dx_Menu_setEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Menu_alignItemsVertically(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Menu_isEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Menu_alignItemsHorizontally(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Menu_alignItemsHorizontallyWithPadding(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Menu_alignItemsVerticallyWithPadding(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ClippingNode();
RBVAL rb_cocos2dx_ClippingNode_hasContent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingNode_setInverted(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingNode_setStencil(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingNode_getAlphaThreshold(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingNode_getStencil(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingNode_setAlphaThreshold(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingNode_isInverted(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingNode_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ClippingRectangleNode();
RBVAL rb_cocos2dx_ClippingRectangleNode_isClippingEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingRectangleNode_setClippingEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingRectangleNode_getClippingRegion(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingRectangleNode_setClippingRegion(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ClippingRectangleNode_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_MotionStreak();
RBVAL rb_cocos2dx_MotionStreak_reset(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MotionStreak_setTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MotionStreak_getTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MotionStreak_tintWithColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MotionStreak_setStartingPositionInitialized(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MotionStreak_isStartingPositionInitialized(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MotionStreak_isFastMode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MotionStreak_setFastMode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_MotionStreak_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ProgressTimer();
RBVAL rb_cocos2dx_ProgressTimer_isReverseDirection(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_setBarChangeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_getPercentage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_setSprite(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_getType(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_getSprite(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_setMidpoint(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_getBarChangeRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_setReverseDirection(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_getMidpoint(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_setPercentage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_setType(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ProgressTimer_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Sprite();
RBVAL rb_cocos2dx_Sprite_setSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_getTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setFlippedY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setFlippedX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_getBatchNode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_getOffsetPosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_removeAllChildrenWithCleanup(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_updateTransform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setTextureRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_isFrameDisplayed(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_getAtlasIndex(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setBatchNode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setDisplayFrameWithAnimationName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setTextureAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_getSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_isDirty(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setAtlasIndex(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setDirty(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_isTextureRectRotated(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_getTextureRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_getTextureAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_isFlippedX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_isFlippedY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_setVertexRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_createWithTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_createWithSpriteFrameName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Sprite_createWithSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Image();
RBVAL rb_cocos2dx_Image_hasPremultipliedAlpha(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_saveToFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_hasAlpha(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_isCompressed(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_getHeight(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_initWithImageFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_getWidth(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_getBitPerPixel(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_getFileType(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_getNumberOfMipmaps(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_getRenderFormat(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_setPVRImagesHavePremultipliedAlpha(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Image_Image(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_RenderTexture();
RBVAL rb_cocos2dx_RenderTexture_setVirtualViewport(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_clearStencil(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_getClearDepth(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_getClearStencil(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_end(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_setClearStencil(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_setSprite(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_getSprite(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_isAutoDraw(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_setKeepMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_setClearFlags(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_begin(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_setAutoDraw(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_setClearColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_endToLua(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_beginWithClear(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_clearDepth(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_getClearColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_clear(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_getClearFlags(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_newImage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_setClearDepth(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_initWithWidthAndHeight(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_RenderTexture_RenderTexture(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_NodeGrid();
RBVAL rb_cocos2dx_NodeGrid_setTarget(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_NodeGrid_getGrid(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_NodeGrid_setGrid(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_NodeGrid_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleBatchNode();
RBVAL rb_cocos2dx_ParticleBatchNode_setTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleBatchNode_disableParticle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleBatchNode_getTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleBatchNode_setTextureAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleBatchNode_getTextureAtlas(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleBatchNode_insertChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleBatchNode_removeChildAtIndex(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleBatchNode_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleBatchNode_createWithTexture(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleSystem();
RBVAL rb_cocos2dx_ParticleSystem_getStartSizeVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_isFull(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getBatchNode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getStartColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getPositionType(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setPosVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEndSpin(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setRotatePerSecondVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getStartSpinVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getRadialAccelVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEndSizeVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setRotation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setTangentialAccel(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setScaleY(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setScaleX(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getRadialAccel(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setStartRadius(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setRotatePerSecond(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEndSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getGravity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getTangentialAccel(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEndRadius(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getSpeed(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getAngle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEndColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setStartSpin(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setDuration(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getPosVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_updateWithNoTime(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_isBlendAdditive(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getSpeedVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setPositionType(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_stopSystem(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getSourcePosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setLifeVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setTotalParticles(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEndColorVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getAtlasIndex(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getStartSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setStartSpinVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_resetSystem(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setAtlasIndex(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setTangentialAccelVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEndRadiusVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEndRadius(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_isOpacityModifyRGB(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_isActive(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setRadialAccelVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setStartSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setSpeed(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getStartSpin(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getRotatePerSecond(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEmitterMode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getDuration(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setSourcePosition(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEndSpinVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setBlendAdditive(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setLife(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setAngleVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setRotationIsDir(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEndSizeVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setAngle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setBatchNode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getTangentialAccelVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEmitterMode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEndSpinVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getAngleVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setStartColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getRotatePerSecondVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEndSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getLife(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setSpeedVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setAutoRemoveOnFinish(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setGravity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_postStep(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEmissionRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEndColorVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getRotationIsDir(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setScale(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEmissionRate(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEndColor(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getLifeVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setStartSizeVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setOpacityModifyRGB(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_addParticle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getStartRadius(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getParticleCount(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getStartRadiusVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setStartColorVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setEndSpin(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setRadialAccel(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_isAutoRemoveOnFinish(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getTotalParticles(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_setStartRadiusVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getEndRadiusVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_getStartColorVar(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystem_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleSystemQuad();
RBVAL rb_cocos2dx_ParticleSystemQuad_setDisplayFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystemQuad_setTextureWithRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystemQuad_listenRendererRecreated(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystemQuad_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSystemQuad_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleFire();
RBVAL rb_cocos2dx_ParticleFire_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleFire_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleFireworks();
RBVAL rb_cocos2dx_ParticleFireworks_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleFireworks_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleSun();
RBVAL rb_cocos2dx_ParticleSun_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSun_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleGalaxy();
RBVAL rb_cocos2dx_ParticleGalaxy_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleGalaxy_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleFlower();
RBVAL rb_cocos2dx_ParticleFlower_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleFlower_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleMeteor();
RBVAL rb_cocos2dx_ParticleMeteor_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleMeteor_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleSpiral();
RBVAL rb_cocos2dx_ParticleSpiral_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSpiral_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleExplosion();
RBVAL rb_cocos2dx_ParticleExplosion_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleExplosion_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleSmoke();
RBVAL rb_cocos2dx_ParticleSmoke_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSmoke_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleSnow();
RBVAL rb_cocos2dx_ParticleSnow_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleSnow_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParticleRain();
RBVAL rb_cocos2dx_ParticleRain_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParticleRain_createWithTotalParticles(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_GridBase();
RBVAL rb_cocos2dx_GridBase_setGridSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_afterBlit(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_afterDraw(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_beforeDraw(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_calculateVertexPoints(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_isTextureFlipped(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_getGridSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_getStep(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_set2DProjection(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_setStep(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_setTextureFlipped(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_blit(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_setActive(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_getReuseGrid(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_initWithSize(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_beforeBlit(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_setReuseGrid(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_isActive(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_reuse(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GridBase_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Grid3D();
RBVAL rb_cocos2dx_Grid3D_getNeedDepthTestForBlit(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Grid3D_setNeedDepthTestForBlit(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Grid3D_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Grid3D_Grid3D(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TiledGrid3D();
RBVAL rb_cocos2dx_TiledGrid3D_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TiledGrid3D_TiledGrid3D(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Camera();
RBVAL rb_cocos2dx_Camera_getProjectionMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_getViewProjectionMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_getViewMatrix(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_getCameraFlag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_getType(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_lookAt(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_setCameraFlag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_createPerspective(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_createOrthographic(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Camera_getVisitingCamera(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_BaseLight();
RBVAL rb_cocos2dx_BaseLight_setEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_BaseLight_getIntensity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_BaseLight_isEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_BaseLight_getLightType(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_BaseLight_setLightFlag(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_BaseLight_setIntensity(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_BaseLight_getLightFlag(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_DirectionLight();
RBVAL rb_cocos2dx_DirectionLight_getDirection(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DirectionLight_getDirectionInWorld(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DirectionLight_setDirection(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_DirectionLight_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_PointLight();
RBVAL rb_cocos2dx_PointLight_getRange(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_PointLight_setRange(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_PointLight_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_SpotLight();
RBVAL rb_cocos2dx_SpotLight_getRange(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_setDirection(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_getCosInnerAngle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_getOuterAngle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_getInnerAngle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_getDirection(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_getCosOuterAngle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_setOuterAngle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_setInnerAngle(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_getDirectionInWorld(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_setRange(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpotLight_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_AmbientLight();
RBVAL rb_cocos2dx_AmbientLight_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_GLProgram();
RBVAL rb_cocos2dx_GLProgram_getFragmentShaderLog(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_initWithByteArrays(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_initWithFilenames(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_use(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_getVertexShaderLog(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_setUniformsForBuiltins(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_updateUniforms(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_setUniformLocationWith1i(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_reset(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_bindAttribLocation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_getAttribLocation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_link(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_createWithByteArrays(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_createWithFilenames(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgram_GLProgram(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_GLProgramCache();
RBVAL rb_cocos2dx_GLProgramCache_addGLProgram(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramCache_getGLProgram(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramCache_reloadDefaultGLPrograms(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramCache_loadDefaultGLPrograms(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramCache_destroyInstance(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramCache_getInstance(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLProgramCache_GLProgramCache(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_TextureCache();
RBVAL rb_cocos2dx_TextureCache_reloadTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_unbindAllImageAsync(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_removeTextureForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_removeAllTextures(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_getDescription(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_getCachedTextureInfo(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_addImage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_unbindImageAsync(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_getTextureForKey(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_removeUnusedTextures(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_removeTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_waitForQuit(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_TextureCache_TextureCache(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Device();
RBVAL rb_cocos2dx_Device_setAccelerometerEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Device_setKeepScreenOn(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Device_setAccelerometerInterval(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Device_getDPI(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Application();
RBVAL rb_cocos2dx_Application_openURL(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Application_getTargetPlatform(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Application_getCurrentLanguage(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Application_getCurrentLanguageCode(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Application_setAnimationInterval(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Application_getInstance(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_GLViewImpl();
RBVAL rb_cocos2dx_GLViewImpl_createWithRect(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLViewImpl_create(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_GLViewImpl_createWithFullScreen(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_AnimationCache();
RBVAL rb_cocos2dx_AnimationCache_getAnimation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationCache_addAnimation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationCache_init(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationCache_addAnimationsWithDictionary(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationCache_removeAnimation(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationCache_addAnimationsWithFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationCache_destroyInstance(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationCache_getInstance(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_AnimationCache_AnimationCache(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_SpriteFrameCache();
RBVAL rb_cocos2dx_SpriteFrameCache_addSpriteFramesWithFileContent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_addSpriteFrame(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_getSpriteFrameByName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_init(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_removeSpriteFrames(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFileContent(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_removeSpriteFrameByName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_destroyInstance(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_SpriteFrameCache_getInstance(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_ParallaxNode();
RBVAL rb_cocos2dx_ParallaxNode_addChild(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParallaxNode_removeAllChildrenWithCleanup(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_ParallaxNode_create(int argc, RBVAL *argv, RBVAL klass);
void rb_register_cocos2dx_Component();
RBVAL rb_cocos2dx_Component_setEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Component_setName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Component_isEnabled(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Component_update(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Component_getOwner(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Component_init(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Component_setOwner(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Component_getName(int argc, RBVAL *argv, RBVAL klass);
RBVAL rb_cocos2dx_Component_create(int argc, RBVAL *argv, RBVAL klass);

void register_all_cocos2dx();
#endif

